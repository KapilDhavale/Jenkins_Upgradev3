pipeline {
    agent any

    tools {
        maven 'Maven_3.9.6'   // Must match your Global Tool Configuration
    }
    
    parameters {
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this a Release Candidate?')
    }

    environment {
        RELEASE_VERSION = '1.1.0'
        INT_VERSION     = 'R2'
    }

    stages {
        stage('Audit tools') {
            steps {
                bat '''
                    echo ==== Tool Versions ====
                    git --version
                    java -version
                    mvn --version
                '''
            }
        }

        stage('Unit Test') {
            steps {
                dir('java-tomcat-sample') {
                    bat '''
                        echo ==== Running Unit Tests ====
                        mvn test
                    '''
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    // Compute suffix: INT_VERSIONci:BUILD_NUMBER if RELEASE is false
                    def versionSuffix = params.RELEASE ?
                        "${env.RELEASE_VERSION}:${env.BUILD_NUMBER}" :
                        "${env.INT_VERSION}ci:${env.BUILD_NUMBER}"

                    echo "Building version: ${versionSuffix}"

                    dir('java-tomcat-sample') {
                        bat """
                            mvn versions:set -DnewVersion=${versionSuffix}-SNAPSHOT
                            mvn versions:update-child-modules
                            mvn clean package
                        """
                    }
                }
            }
        }

        stage('Publish') {
            when {
                expression { return params.RELEASE }
            }
            steps {
                // Adjusted to point to the target folder where Maven outputs the WAR
                archiveArtifacts artifacts: 'java-tomcat-sample/target/*.war', fingerprint: true
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}

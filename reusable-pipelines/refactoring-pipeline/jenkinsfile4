pipeline {
    agent any

    tools {
        maven 'Maven_3.9.6' // Ensure this is configured in Jenkins tools
    }

    parameters {
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this a Release Candidate?')
    }

    environment {
        RELEASE_VERSION = '1.1.0'
        INT_VERSION     = 'R2'
    }

    stages {
        stage('Audit tools') {
            steps {
                script {
                    auditTools()
                }
            }
        }

        stage('Unit Test') {
            steps {
                dir('java-tomcat-sample') {
                    bat '''
                        echo ==== Executing Unit Tests ====
                        mvn test
                    '''
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    def versionSuffix = getBuildVersion()
                    echo "Building version: ${params.RELEASE ? RELEASE_VERSION : INT_VERSION} with suffix: ${versionSuffix}"

                    dir('java-tomcat-sample') {
                        // Separate bat commands for each build step
                        bat "echo Setting version to ${versionSuffix}-SNAPSHOT"
                        bat "mvn versions:set -DnewVersion=${versionSuffix}-SNAPSHOT"
                        bat "mvn versions:update-child-modules"
                        bat "mvn clean package"
                    }
                }
            }
        }

        stage('Publish') {
            steps {
                script {
                    bat 'dir java-tomcat-sample\\target'

                    def warExists = fileExists('java-tomcat-sample/target/*.war')
                    if (warExists) {
                        archiveArtifacts artifacts: 'java-tomcat-sample/target/*.war', fingerprint: true
                    } else {
                        echo "⚠️ WAR file not found. Skipping artifact archiving."
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}

def getBuildVersion() {
    return params.RELEASE 
        ? "${env.RELEASE_VERSION}-${env.BUILD_NUMBER}" 
        : "${env.INT_VERSION}ci-${env.BUILD_NUMBER}"
}

def auditTools() {
    bat '''
        git --version
        java -version
        mvn --version
    '''
}
